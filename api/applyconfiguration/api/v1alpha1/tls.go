// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	apisv1 "sigs.k8s.io/gateway-api/apis/v1"
)

// TLSApplyConfiguration represents a declarative configuration of the TLS type for use
// with apply.
type TLSApplyConfiguration struct {
	SecretRef               *v1.LocalObjectReference            `json:"secretRef,omitempty"`
	Files                   *TLSFilesApplyConfiguration         `json:"files,omitempty"`
	WellKnownCACertificates *apisv1.WellKnownCACertificatesType `json:"wellKnownCACertificates,omitempty"`
	InsecureSkipVerify      *bool                               `json:"insecureSkipVerify,omitempty"`
	Sni                     *string                             `json:"sni,omitempty"`
	VerifySubjectAltNames   []string                            `json:"verifySubjectAltNames,omitempty"`
	Parameters              *TLSParametersApplyConfiguration    `json:"parameters,omitempty"`
	AlpnProtocols           []string                            `json:"alpnProtocols,omitempty"`
	AllowRenegotiation      *bool                               `json:"allowRenegotiation,omitempty"`
	SimpleTLS               *bool                               `json:"simpleTLS,omitempty"`
}

// TLSApplyConfiguration constructs a declarative configuration of the TLS type for use with
// apply.
func TLS() *TLSApplyConfiguration {
	return &TLSApplyConfiguration{}
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithSecretRef(value v1.LocalObjectReference) *TLSApplyConfiguration {
	b.SecretRef = &value
	return b
}

// WithFiles sets the Files field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Files field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithFiles(value *TLSFilesApplyConfiguration) *TLSApplyConfiguration {
	b.Files = value
	return b
}

// WithWellKnownCACertificates sets the WellKnownCACertificates field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WellKnownCACertificates field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithWellKnownCACertificates(value apisv1.WellKnownCACertificatesType) *TLSApplyConfiguration {
	b.WellKnownCACertificates = &value
	return b
}

// WithInsecureSkipVerify sets the InsecureSkipVerify field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InsecureSkipVerify field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithInsecureSkipVerify(value bool) *TLSApplyConfiguration {
	b.InsecureSkipVerify = &value
	return b
}

// WithSni sets the Sni field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sni field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithSni(value string) *TLSApplyConfiguration {
	b.Sni = &value
	return b
}

// WithVerifySubjectAltNames adds the given value to the VerifySubjectAltNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VerifySubjectAltNames field.
func (b *TLSApplyConfiguration) WithVerifySubjectAltNames(values ...string) *TLSApplyConfiguration {
	for i := range values {
		b.VerifySubjectAltNames = append(b.VerifySubjectAltNames, values[i])
	}
	return b
}

// WithParameters sets the Parameters field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Parameters field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithParameters(value *TLSParametersApplyConfiguration) *TLSApplyConfiguration {
	b.Parameters = value
	return b
}

// WithAlpnProtocols adds the given value to the AlpnProtocols field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AlpnProtocols field.
func (b *TLSApplyConfiguration) WithAlpnProtocols(values ...string) *TLSApplyConfiguration {
	for i := range values {
		b.AlpnProtocols = append(b.AlpnProtocols, values[i])
	}
	return b
}

// WithAllowRenegotiation sets the AllowRenegotiation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowRenegotiation field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithAllowRenegotiation(value bool) *TLSApplyConfiguration {
	b.AllowRenegotiation = &value
	return b
}

// WithSimpleTLS sets the SimpleTLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SimpleTLS field is set to the value of the last call.
func (b *TLSApplyConfiguration) WithSimpleTLS(value bool) *TLSApplyConfiguration {
	b.SimpleTLS = &value
	return b
}
